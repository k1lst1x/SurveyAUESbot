import logging
import os
import smtplib
import asyncio
from typing import List, Union
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware

import config as cfg

API_TOKEN = cfg.TOKEN
SENDER_EMAIL = cfg.SENDER_EMAIL
PASSWORD = cfg.PASSWORD
RECEIVER_EMAIL = cfg.RECEIVER_EMAIL

# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
MEDIA_FOLDER = 'media'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
os.makedirs(MEDIA_FOLDER, exist_ok=True)

class AlbumMiddleware(BaseMiddleware):
  """This middleware is for capturing media groups."""

  album_data: dict = {}

  def __init__(self, latency: Union[int, float] = 0.01):
      """
      –í—ã –º–æ–∂–µ—Ç–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∞–ª—å–±–æ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.
      """
      self.latency = latency
      super().__init__()

  async def on_process_message(self, message: types.Message, data: dict):
      if not message.media_group_id:
          return

      try:
          self.album_data[message.media_group_id].append(message)
          raise CancelHandler()  # –°–æ–æ–±—â–∏—Ç–µ aiogram –æ–± –æ—Ç–º–µ–Ω–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã.
      except KeyError:
          self.album_data[message.media_group_id] = [message]
          await asyncio.sleep(self.latency)

          message.conf["is_last"] = True
          data["album"] = self.album_data[message.media_group_id]

  async def on_post_process_message(self, message: types.Message, result: dict, data: dict):
      """–£–±–∏—Ä–∞–π—Ç–µ –∑–∞ —Å–æ–±–æ–π –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –∞–ª—å–±–æ–º–æ–º."""
      if message.media_group_id and message.conf.get("is_last"):
          del self.album_data[message.media_group_id]

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
  await message.reply(
      "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ë–æ—Ç –æ—Ç –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ —Å–≤—è–∑–∏ –∏–º–µ–Ω–∏ –ì—É–º–∞—Ä–±–µ–∫–∞ –î–∞—É–∫–µ–µ–≤–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /anon.")

@dp.message_handler(commands=['anon'])
async def send_anonymous_instruction(message: types.Message):
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 –ú–ë. üìùüìé")

MAX_FILE_SIZE = 15728640  # 15 MB

async def save_media(bot, media_group):
  media_paths = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º
  total_memory = 0
  for media in media_group.media:
      file_id = media.media
      file_type = media.type
  
      # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      file_info = await bot.get_file(file_id)
      total_memory += file_info.file_size
      file_path = file_info.file_path
  
      # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      downloaded_file = await bot.download_file(file_path)

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
      if file_type == "photo":
          file_extension = ".jpg"
      elif file_type == "video":
          file_extension = ".mp4"
      else:
          # –í —Å–ª—É—á–∞–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
          continue
  
      # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É "media" —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      save_path = os.path.join("media", f"{file_id}{file_extension}")
      with open(save_path, "wb") as new_file:
          new_file.write(downloaded_file.getvalue())
      
      # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫
      media_paths.append(save_path)
  if total_memory > MAX_FILE_SIZE:
    return 0
  else:
    return media_paths  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º

async def save_single_media(bot, message):
  if message.photo:
      file_info = await bot.get_file(message.photo[-1].file_id)
      file_extension = ".jpg"
  elif message.video:
      file_info = await bot.get_file(message.video.file_id)
      file_extension = ".mp4"
  else:
      return  # –ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  if file_info.file_size > MAX_FILE_SIZE:
    return 0
  file_path = file_info.file_path
  downloaded_file = await bot.download_file(file_path)
  save_path = os.path.join("media", f"{file_info.file_unique_id}{file_extension}")
  
  with open(save_path, "wb") as new_file:
      new_file.write(downloaded_file.getvalue())
  
  return save_path

@dp.message_handler(is_media_group=True, content_types=types.ContentType.ANY)
async def handle_albums(message: types.Message, album: List[types.Message]):
    media_group = types.MediaGroup()
    for obj in album:
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id
        try:
            media_group.attach({"media": file_id, "type": obj.content_type})
        except ValueError:
            return await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–∏–ø –∞–ª—å–±–æ–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ü§ñ")

    try:
        subject = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
        body = message.caption if message.caption else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã üì∑"

        media_paths = await save_media(bot, media_group)
        if media_paths == 0:
          await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 –ú–ë üö´")
        else:
          await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await send_email(subject, body, media_paths)
  
          await message.answer("–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì¨")

    except Exception as e:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')

@dp.message_handler(content_types=types.ContentType.ANY)
async def process_message(message: types.Message):
    try:
        subject = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
        body = message.text if message.text else (message.caption if message.caption else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã üì∑")

        media_path = await save_single_media(bot, message)

        if media_path == 0:
          await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 –ú–ë üö´")
        else:
          await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await send_email(subject, body, [media_path])
  
          await message.answer("–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì¨")

    except Exception as e:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')

async def send_email(subject, body, media_paths):
  try:
      msg = MIMEMultipart()
      msg['From'] = SENDER_EMAIL
      msg['To'] = RECEIVER_EMAIL
      msg['Subject'] = subject

      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      msg.attach(MIMEText(body, 'plain', 'utf-8'))
      if media_paths == [None]:
          print("media_paths –ø—É—Å—Ç–æ–π")
      else:
          # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
          for media_path in media_paths:
              with open(media_path, 'rb') as f:
                  attachment = MIMEApplication(f.read(), Name=os.path.basename(media_path))
                  attachment['Content-Disposition'] = f'attachment; filename="{os.path.basename(media_path)}"'
                  msg.attach(attachment)

      with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
          server.login(SENDER_EMAIL, PASSWORD)
          server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())
          print('Email sent successfully!')

  except Exception as e:
      print(f'Failed to send email: {e}')

if __name__ == "__main__":
  dp.middleware.setup(AlbumMiddleware())
  executor.start_polling(dp, skip_updates=True)